{"version":3,"sources":["Post.js","PostsList.js","Posts.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","width","heigth","src","post","author","avatar","username","message","body","image","likes","text","dataStatic","PostsList","data","posts","console","log","list","map","el","className","Posts","useState","setErrors","setPosts","a","fetch","json","then","res","catch","err","useEffect","fetchData","App","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oOAgBeA,MAdf,SAAcC,GACb,OACC,6BACC,yBAAKC,MAAM,KAAKC,OAAO,KAAKC,IAAKH,EAAMI,KAAKC,OAAOC,SACnD,2BAAIN,EAAMI,KAAKC,OAAOE,UACtB,6BACA,yBAAKJ,IAAKH,EAAMI,KAAKI,QAAQC,KAAKC,QAClC,qCAAWV,EAAMI,KAAKI,QAAQG,OAC9B,2BAAIX,EAAMI,KAAKI,QAAQC,KAAKG,MAE5B,+BCTKC,EAAa,CACnB,MAAS,eACT,GAAM,uCACN,MAAS,CAEP,CACE,OAAU,CACR,GAAM,uCACN,SAAY,iBACZ,KAAQ,SACR,SAAY,SACZ,MAAS,4BACT,OAAU,kEAEZ,QAAW,CACT,MAAS,IACT,MAAS,IACT,KAAQ,2BACR,GAAM,uCACN,KAAQ,CACN,MAAS,qCACT,KAAQ,uMAmBHC,MAZf,SAAmBd,GACjB,IAAMe,EAAOf,EAAMgB,MAAM,IAAMH,EAC/BI,QAAQC,IAAIH,GAEZ,IAAMI,EAAOJ,EAAKC,MAAMI,KAAI,SAAAC,GAAE,OAAE,kBAAC,EAAD,CAAMjB,KAAMiB,OAC5C,OACE,yBAAKC,UAAU,QACbH,ICRSI,EA1BD,WAAO,IAAD,EACYC,oBAAS,GADrB,mBACDC,GADC,aAEQD,mBAAS,IAFjB,mBAEXR,EAFW,KAEJU,EAFI,iDAIlB,sBAAAC,EAAA,sEACoBC,MAAM,QAD1B,cAGKC,OACAC,MAAK,SAAAC,GAAG,OAAIL,EAASK,MACrBC,OAAM,SAAAC,GAAG,OAAIR,EAAUQ,MAL5B,4CAJkB,sBAgBlB,OAJAC,qBAAU,YAZQ,mCAahBC,MAIA,6BAEE,kBAAC,EAAD,CAAWnB,MAAOA,IAElB,+BCESoB,MAtBf,WAEE,OACE,yBAAKd,UAAU,OACb,4BAAQA,UAAU,cAChB,yCAEA,kBAAC,EAAD,MAEA,uBACEA,UAAU,WACVe,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,oBCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.b4c9ec3c.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Post(props){\n\treturn (\n\t\t<div>\n\t\t\t<img width=\"50\" heigth=\"50\" src={props.post.author.avatar} />\n\t\t\t<a>{props.post.author.username}</a>\n\t\t\t<br />\n\t\t\t<img src={props.post.message.body.image}></img>\n\t\t\t<p>likes: {props.post.message.likes}</p>\n\t\t\t<p>{props.post.message.body.text}</p>\n\n\t\t\t<hr />\n\t\t</div>\n\t\t)\n}\nexport default Post","import React from 'react';\n\nimport Post from './Post'\n  const dataStatic = {\n  \"token\": \"y95azkvpqmz4\",\n  \"id\": \"73550c2b-27fd-4cf6-8a78-da3c9c93c962\",\n  \"posts\": [\n    \n    {\n      \"author\": {\n        \"id\": \"943faee6-3acb-46b2-8ef6-30132336abb7\",\n        \"username\": \"Brenden_Jones6\",\n        \"name\": \"Cullen\",\n        \"lastName\": \"Kuphal\",\n        \"email\": \"Emilia_Nikolaus@gmail.com\",\n        \"avatar\": \"https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg\"\n      },\n      \"message\": {\n        \"likes\": 151,\n        \"views\": 276,\n        \"date\": \"2019-08-12T14:19:02.848Z\",\n        \"id\": \"d927d385-8ffc-45d2-945c-07af6f896318\",\n        \"body\": {\n          \"image\": \"http://lorempixel.com/640/480/cats\",\n          \"text\": \"In repellendus iure et consectetur tempora consequatur et ut. Voluptatem rerum aut vitae repellat. Et quaerat quia quia voluptatem. Veniam est quaerat quam pariatur ratione rerum repellendus.\"\n        }\n      }\n    }\n  ]\n};\n\nfunction PostsList(props) {\n  const data = props.posts[0] ||Â dataStatic;\n  console.log(data);\n\n  const list = data.posts.map(el=><Post post={el}/>) \n  return (\n    <div className=\"list\">\n    \t{list}\n    </div>\n  );\n}\n\nexport default PostsList;\n","import React, { useState, useEffect } from \"react\";\n\nimport PostsList from './PostsList'\n\nconst Posts = () => {\n  const [hasError, setErrors] = useState(false);\n  const [posts, setPosts] = useState({});\n\n  async function fetchData() {\n    const res = await fetch(\"/all\");\n    res\n      .json()\n      .then(res => setPosts(res))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  });  \n\n  return (\n    <div>\n\n      <PostsList posts={posts} />\n\n      <hr />\n    </div>\n  );\n};\n\nexport default Posts;","import React from 'react';\nimport './App.css';\n\nimport Posts from './Posts'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>PetsPosts</h1>\n\n        <Posts />\n\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Show me more!\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// import { Illustration, Shape } from 'react-zdog'\n\n\n// ReactDOM.render(\n//   <Illustration>\n//     <Shape stroke={20} color=\"lightblue\"  />\n//   </Illustration>,\n//   document.getElementById('logo')\n// )\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}